00:00 if you want to build SAS would you
00:02 choose a tech stack that slows you down
00:04 or one that helps you move faster the
00:06 answer is obvious but as developers we
00:08 often pick tools get attached to them
00:11 and ignore better options That's exactly
00:13 what happened to me For a year I built
00:14 SAS with a single text stack It got the
00:17 job done but building features felt slow
00:19 and tedious while other SAS builders
00:22 seem to go 10 times faster So did I
00:25 explore the alternatives no I kept
00:27 hearing this advice Pick a text stack
00:30 and stick to it What matters is that you
00:31 pick one text and you stick to it So I
00:33 buried my head in the sand I made videos
00:36 praising my setup And I lied without
00:38 even realizing it Four web apps later I
00:41 couldn't ignore the frustration anymore
00:43 Things had to change That's when I
00:45 discovered what was really holding me
00:47 back My SAS stack wasn't as good as I
00:49 said it was In fact it sucked But here's
00:52 the good news Once I admitted that I
00:54 could fix it I stopped following
00:56 sandbite advice looked at what was
00:58 actually slowing me down and rebuilt my
01:00 tech stack from the ground up And now I
01:03 believe every developer deserves a tech
01:05 stack that gives some superpowers Here's
01:07 my journey to finding
01:08 mine The thing about front end and
01:11 backend development is that they're
01:12 simple enough on their own but as SAS
01:15 builders we have to combine both And
01:17 that's where things get messy Some tools
01:19 take backend and front end into account
01:21 like Next.js JS has React and serverside
01:24 rendering but other tools focus on just
01:27 one thing like the deployment tool I've
01:30 been using for a long time serverless
01:32 framework It optimizes for just one
01:34 thing deploying serverless functions but
01:37 ignores that allimportant developer
01:39 experience In other words how fast you
01:42 actually build features Serverless
01:44 framework deploys your infrastructure to
01:46 AWS from a single template But the
01:48 biggest problems I've had have been slow
01:50 feedback after making code changes
01:53 having to write too much boilerplate
01:54 code and YAML that's fought me every
01:56 step of the way Thing is even though I
01:58 face these problems on a daily basis I
02:01 didn't want to admit that I was stuck in
02:02 a hole Instead of fixing my problems I
02:05 just dug even
02:06 deeper After building four web apps I
02:09 had a process that worked with a ton of
02:11 custom code to make serverless framework
02:14 fit into my workflow But something still
02:16 felt off I'd tried custom tools like
02:19 Versel that could deploy in seconds So
02:22 why did my setup take minutes although I
02:24 was deploying into AWS from a single
02:26 template it still wasn't a smooth
02:28 process I knew it needed to be faster
02:30 but had no idea how to make that happen
02:33 And you know how it is when it feels
02:34 like everybody's going faster than you
02:36 You're crawling along at a snail's pace
02:39 You seem to waste all your time waiting
02:41 for deployments and you forget any
02:43 previous successes and focus only on the
02:46 failures right now It can leave you
02:47 wondering maybe I don't have what it
02:49 takes after all That's when I lost all
02:51 motivation to keep building Desperate to
02:54 find an alternative way I turned to
02:56 Google I stumbled on an article that
02:58 described the exact pain points I was
03:00 feeling It was like someone had reached
03:02 into my brain and put my frustrations
03:05 into words Even better it wasn't just a
03:07 rant It was written by a team of
03:09 developers that had a solution This gave
03:11 me hope and if I wanted to keep building
03:13 SAS I'd have to try out their tool The
03:16 tool I found is called SST Serverless
03:20 Stack It's designed to help developers
03:22 deploy apps into AWS as easily as
03:24 possible At first I was skeptical but
03:27 the first tutorial I tried was uploading
03:29 images to an AWS S3 bucket which was
03:32 basically my first web app a YouTube
03:34 thumbnail comparison tool Except this
03:36 time it was effortless Suddenly I felt
03:39 motivated again and decided to rewrite
03:41 my first SAS with SST At the same time
03:44 just for a challenge I also rewrote the
03:46 front end from Vue.js to React something
03:49 I covered in the previous video but SST
03:52 showed me something I didn't expect My
03:54 previous developer experience was
03:56 terrible This one was 10 times faster So
03:58 here are four lessons I learned along
04:00 the way that you can apply to your own
04:02 situation One get fast feedback When you
04:04 make a code change especially to
04:06 back-end code you should be able to test
04:08 it immediately SST runs constantly in
04:11 the background and watches for any
04:13 changes It updates your live app and
04:16 even points remote APIs to your local
04:18 code which makes everything feel so much
04:21 faster Automate as much config as
04:23 possible Wiring values between your
04:26 infrastructure and your code shouldn't
04:28 require huge config files SST has a
04:31 feature called links designed to allow
04:33 your code to access AWS resources
04:36 without configuration Three avoid
04:38 reinventing the wheel Writing the same
04:40 code again and again is slow and brittle
04:43 But the great thing about SST is it
04:45 provides highle components for apps like
04:48 Nex.js which creates all the necessary
04:50 resources in AWS and sets up permissions
04:54 automatically Four build your backend
04:56 infrastructure with code YAML sounds
04:59 good in practice but it breaks down when
05:01 you want to conditionally create
05:03 resources SST uses TypeScript so you can
05:06 write conditionals naturally without any
05:08 plugins Look I'll be honest rewriting my
05:11 app in SST wasn't easy No new tool ever
05:14 is but it was so much better than what I
05:16 had before And after a week of deleting
05:18 all the boilerplate from my previous
05:20 setup I pushed the new version of my app
05:23 to production Oh my god it worked Yes
05:28 all the previous stress that you had
05:30 just melts away and you just wish you'd
05:32 found this thing sooner Then you can
05:35 just sigh with relief feel excited about
05:38 what you're going to build in the future
05:40 and tell yourself "This shit's on baby."
05:42 So could SST be part of my tech stack
05:45 going forward absolutely It works for me
05:48 but that doesn't mean it's for everyone
05:50 So how can you design your own tech
05:52 stack
05:53 look turning your ideas into reality on
05:56 the internet should be as fun as
05:58 possible That way you can turn it into a
05:60 daily habit to actually get results And
06:02 if you pick the perfect tech stack first
06:04 time like some SAS builders that's great
06:07 But if you don't like me changing your
06:09 tech stack isn't a sign of lack of focus
06:12 It's a sign of growth So here's what I
06:14 recommend to find something that works
06:16 First write down the biggest thing
06:18 that's slowing you down right now in
06:19 your development process For me it was
06:21 having to manually redeploy every time I
06:24 changed an API then research two to
06:26 three ways to fix it Ask Chat GBT ask a
06:30 colleague You might be just one tool
06:31 away from a completely different dev
06:33 experience And yes switching tools takes
06:36 some effort but a little short-term pain
06:39 can lead to long-term momentum That's
06:41 why I'm excited to add SST to my tech
06:44 stack for my next project And it's the
06:46 first tool I've tried in a while that's
06:48 made me feel like I have superpowers So
06:50 why not make it your mission to find the
06:52 tools that make you feel the same see
06:55 you in the next one